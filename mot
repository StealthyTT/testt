blueprint:
  name: Binary Sensor with Light Control and Toggle Logic (No Helpers with Custom Times)
  description: |
    Turns on the light when the binary sensor detects motion, disables the automation if the light is toggled off and on twice within a short time,
    and re-enables it if the light has been off for a configurable amount of time. This version allows you to set the reset time and the light-off duration without helpers.
  domain: automation
  input:
    binary_sensor:
      name: Binary Sensor
      description: The binary sensor to detect changes in state.
      selector:
        entity:
          domain: binary_sensor
    light_entity:
      name: Light
      description: The light to control.
      selector:
        entity:
          domain: light
    motion_reset_timer:
      name: Motion Reset Timer
      description: Timer to reset toggle count after inactivity.
      selector:
        entity:
          domain: timer

variables:
  toggle_count: 0
  automation_enabled: true
  light_off_for_5min: false
  reset_time_duration: 2  # Set the reset time duration (in minutes)
  off_state_duration: 5  # Set the off state duration (in minutes)

trigger:
  - platform: state
    entity_id: !input 'binary_sensor'
    to: "on"

condition:
  - condition: template
    value_template: "{{ automation_enabled == true }}"  # Only proceed if automation is enabled

action:
  - service: light.turn_on
    target:
      entity_id: !input 'light_entity'
  
  - variables:
      toggle_count: 0  # Reset the toggle count when motion is detected
      light_off_for_5min: false  # Reset the light off timer status
  
  - service: timer.start
    target:
      entity_id: !input 'motion_reset_timer'  # Start/reset the motion reset timer

  # Monitor the light toggle and count how many times it's toggled
  - choose:
      - conditions:
          - condition: state
            entity_id: !input 'light_entity'
            state: "off"
        sequence:
          - variables:
              toggle_count: "{{ toggle_count + 1 }}"
          
          - service: timer.start
            target:
              entity_id: !input 'motion_reset_timer'  # Reset the timer

          - if:
              condition: template
              value_template: "{{ toggle_count >= 2 }}"  # If toggled off and on twice
            then:
              - variables:
                  automation_enabled: false  # Disable automation
              - delay: "{{ reset_time_duration * 60 }}"  # Wait for the reset time in seconds
              - variables:
                  automation_enabled: true  # Re-enable automation

      - conditions:
          - condition: state
            entity_id: !input 'light_entity'
            state: "on"
          - condition: template
            value_template: "{{ toggle_count > 0 }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input 'light_entity'

  # Re-enable automation if the light has been off for the specified duration
  - alias: Turn automation back on if light is off for specified duration
    trigger:
      - platform: state
        entity_id: !input 'light_entity'
        to: "off"
        for: "{{ off_state_duration * 60 }}"  # Light has been off for specified duration (in seconds)
    condition:
      - condition: template
        value_template: "{{ automation_enabled == false }}"
    action:
      - variables:
          automation_enabled: true  # Re-enable automation

  # Reset the toggle count if no motion is detected within the reset timer period
  - alias: Reset toggle count if no action after reset time
    trigger:
      - platform: state
        entity_id: !input 'motion_reset_timer'
        to: "idle"
    action:
      - variables:
          toggle_count: 0  # Reset toggle count after inactivity
